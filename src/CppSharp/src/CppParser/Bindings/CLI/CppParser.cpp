// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "CppParser.h"
#include "AST.h"
#include "Decl.h"
#include "Target.h"

using namespace System;
using namespace System::Runtime::InteropServices;

CppSharp::Parser::CppParserOptions::CppParserOptions(struct ::CppSharp::CppParser::CppParserOptions* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::CppParserOptions^ CppSharp::Parser::CppParserOptions::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::CppParserOptions((struct ::CppSharp::CppParser::CppParserOptions*) native.ToPointer());
}

CppSharp::Parser::CppParserOptions::CppParserOptions(struct ::CppSharp::CppParser::CppParserOptions* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::CppParserOptions^ CppSharp::Parser::CppParserOptions::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::CppParserOptions((struct ::CppSharp::CppParser::CppParserOptions*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::CppParserOptions::~CppParserOptions()
{
    delete NativePtr;
}

CppSharp::Parser::CppParserOptions::CppParserOptions()
{
    __ownsNativeInstance = true;
    NativePtr = new struct ::CppSharp::CppParser::CppParserOptions();
}

::System::String^ CppSharp::Parser::CppParserOptions::GetArguments(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getArguments(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppParserOptions::AddArguments(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->addArguments(__arg0);
}

void CppSharp::Parser::CppParserOptions::ClearArguments()
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->clearArguments();
}

::System::String^ CppSharp::Parser::CppParserOptions::GetCompilationOptions(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getCompilationOptions(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppParserOptions::AddCompilationOptions(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->addCompilationOptions(__arg0);
}

void CppSharp::Parser::CppParserOptions::ClearCompilationOptions()
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->clearCompilationOptions();
}

::System::String^ CppSharp::Parser::CppParserOptions::GetSourceFiles(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getSourceFiles(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppParserOptions::AddSourceFiles(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->addSourceFiles(__arg0);
}

void CppSharp::Parser::CppParserOptions::ClearSourceFiles()
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->clearSourceFiles();
}

::System::String^ CppSharp::Parser::CppParserOptions::GetIncludeDirs(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getIncludeDirs(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppParserOptions::AddIncludeDirs(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->addIncludeDirs(__arg0);
}

void CppSharp::Parser::CppParserOptions::ClearIncludeDirs()
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->clearIncludeDirs();
}

::System::String^ CppSharp::Parser::CppParserOptions::GetSystemIncludeDirs(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getSystemIncludeDirs(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppParserOptions::AddSystemIncludeDirs(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->addSystemIncludeDirs(__arg0);
}

void CppSharp::Parser::CppParserOptions::ClearSystemIncludeDirs()
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->clearSystemIncludeDirs();
}

::System::String^ CppSharp::Parser::CppParserOptions::GetDefines(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getDefines(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppParserOptions::AddDefines(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->addDefines(__arg0);
}

void CppSharp::Parser::CppParserOptions::ClearDefines()
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->clearDefines();
}

::System::String^ CppSharp::Parser::CppParserOptions::GetUndefines(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getUndefines(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppParserOptions::AddUndefines(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->addUndefines(__arg0);
}

void CppSharp::Parser::CppParserOptions::ClearUndefines()
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->clearUndefines();
}

::System::String^ CppSharp::Parser::CppParserOptions::GetSupportedStdTypes(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getSupportedStdTypes(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppParserOptions::AddSupportedStdTypes(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->addSupportedStdTypes(__arg0);
}

void CppSharp::Parser::CppParserOptions::ClearSupportedStdTypes()
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->clearSupportedStdTypes();
}

::System::String^ CppSharp::Parser::CppParserOptions::GetSupportedFunctionTemplates(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getSupportedFunctionTemplates(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppParserOptions::AddSupportedFunctionTemplates(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->addSupportedFunctionTemplates(__arg0);
}

void CppSharp::Parser::CppParserOptions::ClearSupportedFunctionTemplates()
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->clearSupportedFunctionTemplates();
}

CppSharp::Parser::CppParserOptions::CppParserOptions(CppSharp::Parser::CppParserOptions^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(struct ::CppSharp::CppParser::CppParserOptions*)_0->NativePtr;
    NativePtr = new struct ::CppSharp::CppParser::CppParserOptions(__arg0);
}

::System::IntPtr CppSharp::Parser::CppParserOptions::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::CppParserOptions::__Instance::set(::System::IntPtr object)
{
    NativePtr = (struct ::CppSharp::CppParser::CppParserOptions*)object.ToPointer();
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppParserOptions::Arguments::get()
{
    auto _tmp__Arguments = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->Arguments;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__Arguments->Add(_marshalElement);
    }
    return _tmp__Arguments;
}

void CppSharp::Parser::CppParserOptions::Arguments::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->Arguments = _tmpvalue;
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppParserOptions::CompilationOptions::get()
{
    auto _tmp__CompilationOptions = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->CompilationOptions;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__CompilationOptions->Add(_marshalElement);
    }
    return _tmp__CompilationOptions;
}

void CppSharp::Parser::CppParserOptions::CompilationOptions::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->CompilationOptions = _tmpvalue;
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppParserOptions::SourceFiles::get()
{
    auto _tmp__SourceFiles = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->SourceFiles;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__SourceFiles->Add(_marshalElement);
    }
    return _tmp__SourceFiles;
}

void CppSharp::Parser::CppParserOptions::SourceFiles::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->SourceFiles = _tmpvalue;
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppParserOptions::IncludeDirs::get()
{
    auto _tmp__IncludeDirs = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->IncludeDirs;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__IncludeDirs->Add(_marshalElement);
    }
    return _tmp__IncludeDirs;
}

void CppSharp::Parser::CppParserOptions::IncludeDirs::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->IncludeDirs = _tmpvalue;
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppParserOptions::SystemIncludeDirs::get()
{
    auto _tmp__SystemIncludeDirs = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->SystemIncludeDirs;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__SystemIncludeDirs->Add(_marshalElement);
    }
    return _tmp__SystemIncludeDirs;
}

void CppSharp::Parser::CppParserOptions::SystemIncludeDirs::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->SystemIncludeDirs = _tmpvalue;
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppParserOptions::Defines::get()
{
    auto _tmp__Defines = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->Defines;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__Defines->Add(_marshalElement);
    }
    return _tmp__Defines;
}

void CppSharp::Parser::CppParserOptions::Defines::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->Defines = _tmpvalue;
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppParserOptions::Undefines::get()
{
    auto _tmp__Undefines = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->Undefines;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__Undefines->Add(_marshalElement);
    }
    return _tmp__Undefines;
}

void CppSharp::Parser::CppParserOptions::Undefines::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->Undefines = _tmpvalue;
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppParserOptions::SupportedStdTypes::get()
{
    auto _tmp__SupportedStdTypes = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->SupportedStdTypes;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__SupportedStdTypes->Add(_marshalElement);
    }
    return _tmp__SupportedStdTypes;
}

void CppSharp::Parser::CppParserOptions::SupportedStdTypes::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->SupportedStdTypes = _tmpvalue;
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppParserOptions::SupportedFunctionTemplates::get()
{
    auto _tmp__SupportedFunctionTemplates = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->SupportedFunctionTemplates;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__SupportedFunctionTemplates->Add(_marshalElement);
    }
    return _tmp__SupportedFunctionTemplates;
}

void CppSharp::Parser::CppParserOptions::SupportedFunctionTemplates::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->SupportedFunctionTemplates = _tmpvalue;
}

CppSharp::Parser::AST::ASTContext^ CppSharp::Parser::CppParserOptions::ASTContext::get()
{
    return (NativePtr->ASTContext == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::ASTContext((class ::CppSharp::CppParser::AST::ASTContext*)NativePtr->ASTContext);
}

void CppSharp::Parser::CppParserOptions::ASTContext::set(CppSharp::Parser::AST::ASTContext^ value)
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->ASTContext = (class ::CppSharp::CppParser::AST::ASTContext*)value->NativePtr;
}

int CppSharp::Parser::CppParserOptions::ToolSetToUse::get()
{
    return NativePtr->toolSetToUse;
}

void CppSharp::Parser::CppParserOptions::ToolSetToUse::set(int value)
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->toolSetToUse = value;
}

::System::String^ CppSharp::Parser::CppParserOptions::TargetTriple::get()
{
    return clix::marshalString<clix::E_UTF8>(NativePtr->targetTriple);
}

void CppSharp::Parser::CppParserOptions::TargetTriple::set(::System::String^ value)
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->targetTriple = clix::marshalString<clix::E_UTF8>(value);
}

bool CppSharp::Parser::CppParserOptions::NoStandardIncludes::get()
{
    return NativePtr->noStandardIncludes;
}

void CppSharp::Parser::CppParserOptions::NoStandardIncludes::set(bool value)
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->noStandardIncludes = value;
}

bool CppSharp::Parser::CppParserOptions::NoBuiltinIncludes::get()
{
    return NativePtr->noBuiltinIncludes;
}

void CppSharp::Parser::CppParserOptions::NoBuiltinIncludes::set(bool value)
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->noBuiltinIncludes = value;
}

bool CppSharp::Parser::CppParserOptions::MicrosoftMode::get()
{
    return NativePtr->microsoftMode;
}

void CppSharp::Parser::CppParserOptions::MicrosoftMode::set(bool value)
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->microsoftMode = value;
}

bool CppSharp::Parser::CppParserOptions::Verbose::get()
{
    return NativePtr->verbose;
}

void CppSharp::Parser::CppParserOptions::Verbose::set(bool value)
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->verbose = value;
}

bool CppSharp::Parser::CppParserOptions::UnityBuild::get()
{
    return NativePtr->unityBuild;
}

void CppSharp::Parser::CppParserOptions::UnityBuild::set(bool value)
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->unityBuild = value;
}

bool CppSharp::Parser::CppParserOptions::SkipPrivateDeclarations::get()
{
    return NativePtr->skipPrivateDeclarations;
}

void CppSharp::Parser::CppParserOptions::SkipPrivateDeclarations::set(bool value)
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->skipPrivateDeclarations = value;
}

bool CppSharp::Parser::CppParserOptions::SkipLayoutInfo::get()
{
    return NativePtr->skipLayoutInfo;
}

void CppSharp::Parser::CppParserOptions::SkipLayoutInfo::set(bool value)
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->skipLayoutInfo = value;
}

bool CppSharp::Parser::CppParserOptions::SkipFunctionBodies::get()
{
    return NativePtr->skipFunctionBodies;
}

void CppSharp::Parser::CppParserOptions::SkipFunctionBodies::set(bool value)
{
    ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->skipFunctionBodies = value;
}

::System::String^ CppSharp::Parser::CppParserOptions::ClangVersion::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getClangVersion();
    return clix::marshalString<clix::E_UTF8>(___ret);
}

unsigned int CppSharp::Parser::CppParserOptions::ArgumentsCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getArgumentsCount();
    return ___ret;
}

unsigned int CppSharp::Parser::CppParserOptions::CompilationOptionsCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getCompilationOptionsCount();
    return ___ret;
}

unsigned int CppSharp::Parser::CppParserOptions::SourceFilesCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getSourceFilesCount();
    return ___ret;
}

unsigned int CppSharp::Parser::CppParserOptions::IncludeDirsCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getIncludeDirsCount();
    return ___ret;
}

unsigned int CppSharp::Parser::CppParserOptions::SystemIncludeDirsCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getSystemIncludeDirsCount();
    return ___ret;
}

unsigned int CppSharp::Parser::CppParserOptions::DefinesCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getDefinesCount();
    return ___ret;
}

unsigned int CppSharp::Parser::CppParserOptions::UndefinesCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getUndefinesCount();
    return ___ret;
}

unsigned int CppSharp::Parser::CppParserOptions::SupportedStdTypesCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getSupportedStdTypesCount();
    return ___ret;
}

unsigned int CppSharp::Parser::CppParserOptions::SupportedFunctionTemplatesCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppParserOptions*)NativePtr)->getSupportedFunctionTemplatesCount();
    return ___ret;
}

CppSharp::Parser::CppLinkerOptions::CppLinkerOptions(struct ::CppSharp::CppParser::CppLinkerOptions* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::CppLinkerOptions^ CppSharp::Parser::CppLinkerOptions::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::CppLinkerOptions((struct ::CppSharp::CppParser::CppLinkerOptions*) native.ToPointer());
}

CppSharp::Parser::CppLinkerOptions::CppLinkerOptions(struct ::CppSharp::CppParser::CppLinkerOptions* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::CppLinkerOptions^ CppSharp::Parser::CppLinkerOptions::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::CppLinkerOptions((struct ::CppSharp::CppParser::CppLinkerOptions*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::CppLinkerOptions::~CppLinkerOptions()
{
    delete NativePtr;
}

CppSharp::Parser::CppLinkerOptions::CppLinkerOptions()
{
    __ownsNativeInstance = true;
    NativePtr = new struct ::CppSharp::CppParser::CppLinkerOptions();
}

::System::String^ CppSharp::Parser::CppLinkerOptions::GetArguments(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->getArguments(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppLinkerOptions::AddArguments(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->addArguments(__arg0);
}

void CppSharp::Parser::CppLinkerOptions::ClearArguments()
{
    ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->clearArguments();
}

::System::String^ CppSharp::Parser::CppLinkerOptions::GetLibraryDirs(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->getLibraryDirs(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppLinkerOptions::AddLibraryDirs(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->addLibraryDirs(__arg0);
}

void CppSharp::Parser::CppLinkerOptions::ClearLibraryDirs()
{
    ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->clearLibraryDirs();
}

::System::String^ CppSharp::Parser::CppLinkerOptions::GetLibraries(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->getLibraries(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(___ret));
}

void CppSharp::Parser::CppLinkerOptions::AddLibraries(::System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->addLibraries(__arg0);
}

void CppSharp::Parser::CppLinkerOptions::ClearLibraries()
{
    ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->clearLibraries();
}

CppSharp::Parser::CppLinkerOptions::CppLinkerOptions(CppSharp::Parser::CppLinkerOptions^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(struct ::CppSharp::CppParser::CppLinkerOptions*)_0->NativePtr;
    NativePtr = new struct ::CppSharp::CppParser::CppLinkerOptions(__arg0);
}

::System::IntPtr CppSharp::Parser::CppLinkerOptions::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::CppLinkerOptions::__Instance::set(::System::IntPtr object)
{
    NativePtr = (struct ::CppSharp::CppParser::CppLinkerOptions*)object.ToPointer();
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppLinkerOptions::Arguments::get()
{
    auto _tmp__Arguments = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->Arguments;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__Arguments->Add(_marshalElement);
    }
    return _tmp__Arguments;
}

void CppSharp::Parser::CppLinkerOptions::Arguments::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->Arguments = _tmpvalue;
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppLinkerOptions::LibraryDirs::get()
{
    auto _tmp__LibraryDirs = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->LibraryDirs;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__LibraryDirs->Add(_marshalElement);
    }
    return _tmp__LibraryDirs;
}

void CppSharp::Parser::CppLinkerOptions::LibraryDirs::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->LibraryDirs = _tmpvalue;
}

::System::Collections::Generic::List<::System::String^>^ CppSharp::Parser::CppLinkerOptions::Libraries::get()
{
    auto _tmp__Libraries = gcnew ::System::Collections::Generic::List<::System::String^>();
    auto __list0 = NativePtr->Libraries;
    for(auto _element : __list0)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__Libraries->Add(_marshalElement);
    }
    return _tmp__Libraries;
}

void CppSharp::Parser::CppLinkerOptions::Libraries::set(::System::Collections::Generic::List<::System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(::System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->Libraries = _tmpvalue;
}

unsigned int CppSharp::Parser::CppLinkerOptions::ArgumentsCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->getArgumentsCount();
    return ___ret;
}

unsigned int CppSharp::Parser::CppLinkerOptions::LibraryDirsCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->getLibraryDirsCount();
    return ___ret;
}

unsigned int CppSharp::Parser::CppLinkerOptions::LibrariesCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::CppLinkerOptions*)NativePtr)->getLibrariesCount();
    return ___ret;
}

CppSharp::Parser::ParserDiagnostic::ParserDiagnostic(struct ::CppSharp::CppParser::ParserDiagnostic* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::ParserDiagnostic^ CppSharp::Parser::ParserDiagnostic::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::ParserDiagnostic((struct ::CppSharp::CppParser::ParserDiagnostic*) native.ToPointer());
}

CppSharp::Parser::ParserDiagnostic::ParserDiagnostic(struct ::CppSharp::CppParser::ParserDiagnostic* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::ParserDiagnostic^ CppSharp::Parser::ParserDiagnostic::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::ParserDiagnostic((struct ::CppSharp::CppParser::ParserDiagnostic*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::ParserDiagnostic::~ParserDiagnostic()
{
    delete NativePtr;
}

CppSharp::Parser::ParserDiagnostic::ParserDiagnostic()
{
    __ownsNativeInstance = true;
    NativePtr = new struct ::CppSharp::CppParser::ParserDiagnostic();
}

CppSharp::Parser::ParserDiagnostic::ParserDiagnostic(CppSharp::Parser::ParserDiagnostic^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(struct ::CppSharp::CppParser::ParserDiagnostic*)_0->NativePtr;
    NativePtr = new struct ::CppSharp::CppParser::ParserDiagnostic(__arg0);
}

::System::IntPtr CppSharp::Parser::ParserDiagnostic::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::ParserDiagnostic::__Instance::set(::System::IntPtr object)
{
    NativePtr = (struct ::CppSharp::CppParser::ParserDiagnostic*)object.ToPointer();
}

::System::String^ CppSharp::Parser::ParserDiagnostic::FileName::get()
{
    return clix::marshalString<clix::E_UTF8>(NativePtr->fileName);
}

void CppSharp::Parser::ParserDiagnostic::FileName::set(::System::String^ value)
{
    ((struct ::CppSharp::CppParser::ParserDiagnostic*)NativePtr)->fileName = clix::marshalString<clix::E_UTF8>(value);
}

::System::String^ CppSharp::Parser::ParserDiagnostic::Message::get()
{
    return clix::marshalString<clix::E_UTF8>(NativePtr->message);
}

void CppSharp::Parser::ParserDiagnostic::Message::set(::System::String^ value)
{
    ((struct ::CppSharp::CppParser::ParserDiagnostic*)NativePtr)->message = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::ParserDiagnosticLevel CppSharp::Parser::ParserDiagnostic::Level::get()
{
    return (CppSharp::Parser::ParserDiagnosticLevel)NativePtr->level;
}

void CppSharp::Parser::ParserDiagnostic::Level::set(CppSharp::Parser::ParserDiagnosticLevel value)
{
    ((struct ::CppSharp::CppParser::ParserDiagnostic*)NativePtr)->level = (enum ::CppSharp::CppParser::ParserDiagnosticLevel)value;
}

int CppSharp::Parser::ParserDiagnostic::LineNumber::get()
{
    return NativePtr->lineNumber;
}

void CppSharp::Parser::ParserDiagnostic::LineNumber::set(int value)
{
    ((struct ::CppSharp::CppParser::ParserDiagnostic*)NativePtr)->lineNumber = value;
}

int CppSharp::Parser::ParserDiagnostic::ColumnNumber::get()
{
    return NativePtr->columnNumber;
}

void CppSharp::Parser::ParserDiagnostic::ColumnNumber::set(int value)
{
    ((struct ::CppSharp::CppParser::ParserDiagnostic*)NativePtr)->columnNumber = value;
}

CppSharp::Parser::ParserResult::ParserResult(struct ::CppSharp::CppParser::ParserResult* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::ParserResult^ CppSharp::Parser::ParserResult::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::ParserResult((struct ::CppSharp::CppParser::ParserResult*) native.ToPointer());
}

CppSharp::Parser::ParserResult::ParserResult(struct ::CppSharp::CppParser::ParserResult* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::ParserResult^ CppSharp::Parser::ParserResult::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::ParserResult((struct ::CppSharp::CppParser::ParserResult*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::ParserResult::~ParserResult()
{
    delete NativePtr;
}

CppSharp::Parser::ParserResult::ParserResult()
{
    __ownsNativeInstance = true;
    NativePtr = new struct ::CppSharp::CppParser::ParserResult();
}

CppSharp::Parser::ParserResult::ParserResult(CppSharp::Parser::ParserResult^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(struct ::CppSharp::CppParser::ParserResult*)_0->NativePtr;
    NativePtr = new struct ::CppSharp::CppParser::ParserResult(__arg0);
}

CppSharp::Parser::ParserDiagnostic^ CppSharp::Parser::ParserResult::GetDiagnostics(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->getDiagnostics(i);
    auto _____ret = new struct ::CppSharp::CppParser::ParserDiagnostic(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::ParserDiagnostic((struct ::CppSharp::CppParser::ParserDiagnostic*)_____ret, true);
}

void CppSharp::Parser::ParserResult::AddDiagnostics(CppSharp::Parser::ParserDiagnostic^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(struct ::CppSharp::CppParser::ParserDiagnostic*)s->NativePtr;
    ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->addDiagnostics(__arg0);
}

void CppSharp::Parser::ParserResult::ClearDiagnostics()
{
    ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->clearDiagnostics();
}

CppSharp::Parser::AST::NativeLibrary^ CppSharp::Parser::ParserResult::GetLibraries(unsigned int i)
{
    auto ___ret = ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->getLibraries(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::NativeLibrary((class ::CppSharp::CppParser::AST::NativeLibrary*)___ret);
}

void CppSharp::Parser::ParserResult::AddLibraries(CppSharp::Parser::AST::NativeLibrary^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::NativeLibrary*)s->NativePtr;
    ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->addLibraries(__arg0);
}

void CppSharp::Parser::ParserResult::ClearLibraries()
{
    ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->clearLibraries();
}

::System::IntPtr CppSharp::Parser::ParserResult::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::ParserResult::__Instance::set(::System::IntPtr object)
{
    NativePtr = (struct ::CppSharp::CppParser::ParserResult*)object.ToPointer();
}

CppSharp::Parser::ParserResultKind CppSharp::Parser::ParserResult::Kind::get()
{
    return (CppSharp::Parser::ParserResultKind)NativePtr->kind;
}

void CppSharp::Parser::ParserResult::Kind::set(CppSharp::Parser::ParserResultKind value)
{
    ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->kind = (enum ::CppSharp::CppParser::ParserResultKind)value;
}

::System::Collections::Generic::List<CppSharp::Parser::ParserDiagnostic^>^ CppSharp::Parser::ParserResult::Diagnostics::get()
{
    auto _tmp__Diagnostics = gcnew ::System::Collections::Generic::List<CppSharp::Parser::ParserDiagnostic^>();
    auto __list0 = NativePtr->Diagnostics;
    for(auto _element : __list0)
    {
        auto ___element = new struct ::CppSharp::CppParser::ParserDiagnostic(_element);
        auto _marshalElement = (___element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::ParserDiagnostic((struct ::CppSharp::CppParser::ParserDiagnostic*)___element, true);
        _tmp__Diagnostics->Add(_marshalElement);
    }
    return _tmp__Diagnostics;
}

void CppSharp::Parser::ParserResult::Diagnostics::set(::System::Collections::Generic::List<CppSharp::Parser::ParserDiagnostic^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::ParserDiagnostic>();
    for each(CppSharp::Parser::ParserDiagnostic^ _element in value)
    {
        if (ReferenceEquals(_element, nullptr))
        throw gcnew ::System::ArgumentNullException("_element", "Cannot be null because it is passed by value.");
        auto _marshalElement = *(struct ::CppSharp::CppParser::ParserDiagnostic*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->Diagnostics = _tmpvalue;
}

::System::Collections::Generic::List<CppSharp::Parser::AST::NativeLibrary^>^ CppSharp::Parser::ParserResult::Libraries::get()
{
    auto _tmp__Libraries = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::NativeLibrary^>();
    auto __list0 = NativePtr->Libraries;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::NativeLibrary((class ::CppSharp::CppParser::AST::NativeLibrary*)_element);
        _tmp__Libraries->Add(_marshalElement);
    }
    return _tmp__Libraries;
}

void CppSharp::Parser::ParserResult::Libraries::set(::System::Collections::Generic::List<CppSharp::Parser::AST::NativeLibrary^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::NativeLibrary*>();
    for each(CppSharp::Parser::AST::NativeLibrary^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::NativeLibrary*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->Libraries = _tmpvalue;
}

CppSharp::Parser::ParserTargetInfo^ CppSharp::Parser::ParserResult::TargetInfo::get()
{
    return (NativePtr->targetInfo == nullptr) ? nullptr : gcnew ::CppSharp::Parser::ParserTargetInfo((struct ::CppSharp::CppParser::ParserTargetInfo*)NativePtr->targetInfo);
}

void CppSharp::Parser::ParserResult::TargetInfo::set(CppSharp::Parser::ParserTargetInfo^ value)
{
    ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->targetInfo = (struct ::CppSharp::CppParser::ParserTargetInfo*)value->NativePtr;
}

unsigned int CppSharp::Parser::ParserResult::DiagnosticsCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->getDiagnosticsCount();
    return ___ret;
}

unsigned int CppSharp::Parser::ParserResult::LibrariesCount::get()
{
    auto ___ret = ((struct ::CppSharp::CppParser::ParserResult*)NativePtr)->getLibrariesCount();
    return ___ret;
}

CppSharp::Parser::ClangParser::ClangParser(class ::CppSharp::CppParser::ClangParser* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::ClangParser^ CppSharp::Parser::ClangParser::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::ClangParser((class ::CppSharp::CppParser::ClangParser*) native.ToPointer());
}

CppSharp::Parser::ClangParser::ClangParser(class ::CppSharp::CppParser::ClangParser* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::ClangParser^ CppSharp::Parser::ClangParser::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::ClangParser((class ::CppSharp::CppParser::ClangParser*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::ClangParser::~ClangParser()
{
    delete NativePtr;
}

CppSharp::Parser::ParserResult^ CppSharp::Parser::ClangParser::ParseHeader(CppSharp::Parser::CppParserOptions^ Opts)
{
    auto __arg0 = (struct ::CppSharp::CppParser::CppParserOptions*)Opts->NativePtr;
    auto ___ret = ::CppSharp::CppParser::ClangParser::ParseHeader(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::ParserResult((struct ::CppSharp::CppParser::ParserResult*)___ret);
}

CppSharp::Parser::ParserResult^ CppSharp::Parser::ClangParser::ParseLibrary(CppSharp::Parser::CppLinkerOptions^ Opts)
{
    auto __arg0 = (struct ::CppSharp::CppParser::CppLinkerOptions*)Opts->NativePtr;
    auto ___ret = ::CppSharp::CppParser::ClangParser::ParseLibrary(__arg0);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::ParserResult((struct ::CppSharp::CppParser::ParserResult*)___ret);
}

CppSharp::Parser::ParserResult^ CppSharp::Parser::ClangParser::Build(CppSharp::Parser::CppParserOptions^ Opts, CppSharp::Parser::CppLinkerOptions^ LinkerOptions, ::System::String^ File, bool Last)
{
    auto __arg0 = (struct ::CppSharp::CppParser::CppParserOptions*)Opts->NativePtr;
    auto __arg1 = (struct ::CppSharp::CppParser::CppLinkerOptions*)LinkerOptions->NativePtr;
    auto __arg2 = clix::marshalString<clix::E_UTF8>(File);
    auto ___ret = ::CppSharp::CppParser::ClangParser::Build(__arg0, __arg1, __arg2, Last);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::ParserResult((struct ::CppSharp::CppParser::ParserResult*)___ret);
}

CppSharp::Parser::ParserResult^ CppSharp::Parser::ClangParser::Compile(CppSharp::Parser::CppParserOptions^ Opts, ::System::String^ File)
{
    auto __arg0 = (struct ::CppSharp::CppParser::CppParserOptions*)Opts->NativePtr;
    auto __arg1 = clix::marshalString<clix::E_UTF8>(File);
    auto ___ret = ::CppSharp::CppParser::ClangParser::Compile(__arg0, __arg1);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::ParserResult((struct ::CppSharp::CppParser::ParserResult*)___ret);
}

CppSharp::Parser::ParserResult^ CppSharp::Parser::ClangParser::Link(CppSharp::Parser::CppParserOptions^ Opts, CppSharp::Parser::CppLinkerOptions^ LinkerOptions, ::System::String^ File, bool Last)
{
    auto __arg0 = (struct ::CppSharp::CppParser::CppParserOptions*)Opts->NativePtr;
    auto __arg1 = (struct ::CppSharp::CppParser::CppLinkerOptions*)LinkerOptions->NativePtr;
    auto __arg2 = clix::marshalString<clix::E_UTF8>(File);
    auto ___ret = ::CppSharp::CppParser::ClangParser::Link(__arg0, __arg1, __arg2, Last);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::ParserResult((struct ::CppSharp::CppParser::ParserResult*)___ret);
}

CppSharp::Parser::ClangParser::ClangParser()
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::ClangParser();
}

CppSharp::Parser::ClangParser::ClangParser(CppSharp::Parser::ClangParser^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::ClangParser*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::ClangParser(__arg0);
}

::System::IntPtr CppSharp::Parser::ClangParser::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::ClangParser::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::CppSharp::CppParser::ClangParser*)object.ToPointer();
}
